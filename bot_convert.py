import telebot
from currency_converter import CurrencyConverter
from telebot import types

bot = telebot.TeleBot(' ')  # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
currency = CurrencyConverter()
amount = 0

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤')
    btn2 = types.KeyboardButton('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç')
    btn3 = types.KeyboardButton('–ü–æ–º–æ—â—å')
    markup.add(btn1, btn2, btn3)
    
    bot.send_message(message.chat.id, 
                    '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤. –í—ã–±–µ—Ä–∏ —á—Ç–æ –Ω—É–∂–Ω–æ:\n'
                    '1. –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤\n'
                    '2. –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç\n'
                    '3. –ü–æ–º–æ—â—å\n'
                    '–ö—É—Ä—Å –≤–∞–ª—é—Ç –º–æ–∂–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ',
                    reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == '–†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, get_income)
    elif message.text == '–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, get_amount)
    elif message.text == '–ü–æ–º–æ—â—å':
        msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –ø–æ–º–æ–∂–µ–º! \n üîß –î–∞–Ω–Ω—ã–π –±–æ—Ç –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª. \n üîß –ú—ã –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ —É–¥–æ–±–Ω–µ–µ –¥–ª—è –≤–∞—Å! \n üîß –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ —Ç–µ—Ä–ø–µ–Ω–∏–µ! \n üîß –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ! \n üîß –°–∫–æ—Ä–æ –≤—Å—ë –±—É–¥–µ—Ç –ª—É—á—à–µ!')
        bot.register_next_step_handler(msg, send_help)
    else:
        bot.send_message(message.chat.id, '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫!')
        start(message)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±—é–¥–∂–µ—Ç–∞
def get_income(message):
    try:
        income = float(message.text)
        msg = bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤:')
        bot.register_next_step_handler(msg, lambda m: calculate_balance(m, income))
    except:
        bot.send_message(message.chat.id, '–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
        start(message)

def calculate_balance(message, income):
    try:
        expenses = float(message.text)
        balance = income - expenses
        bot.send_message(message.chat.id, f'–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance:.2f}')
        start(message)
    except:
        bot.send_message(message.chat.id, '–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
        start(message)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –≤–∞–ª—é—Ç
def get_amount(message):
    global amount
    try:
        amount = float(message.text)
        if amount <= 0:
            bot.send_message(message.chat.id, '–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!')
            start(message)
            return
            
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('USD ‚Üí EUR', callback_data='usd/eur')
        btn2 = types.InlineKeyboardButton('EUR ‚Üí USD', callback_data='eur/usd')
        btn3 = types.InlineKeyboardButton('RUB ‚Üí USD', callback_data='rub/usd')
        btn4 = types.InlineKeyboardButton('–î—Ä—É–≥–∞—è –≤–∞–ª—é—Ç–∞', callback_data='other')
        markup.add(btn1, btn2, btn3, btn4)
        
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—ã:', reply_markup=markup)
    except:
        bot.send_message(message.chat.id, '–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
        start(message)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == 'other':
        msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏ –ø–∞—Ä—É –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ / (–Ω–∞–ø—Ä–∏–º–µ—Ä USD/EUR):')
        bot.register_next_step_handler(msg, custom_currency)
    else:
        try:
            from_curr, to_curr = call.data.split('/')
            result = currency.convert(amount, from_curr.upper(), to_curr.upper())
            bot.send_message(call.message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {round(result, 2)}')
            start(call.message)
        except:
            bot.send_message(call.message.chat.id, '–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
            start(call.message)

def custom_currency(message):
    try:
        from_curr, to_curr = message.text.upper().split('/')
        result = currency.convert(amount, from_curr, to_curr)
        bot.send_message(message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {round(result, 2)}')
        start(message)
    except:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
        start(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–º–æ—â–∏
def send_help(message):
    bot.forward_message('@', message.chat.id, message.message_id)  # –ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏–µ–º–∞ —á–µ—Ä–µ–∑ "@"
    bot.send_message(message.chat.id, '–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –°–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º.')
    start(message)

bot.polling(none_stop=True)
