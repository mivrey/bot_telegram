#v0.2
import telebot
from currency_converter import CurrencyConverter
from telebot import types
from datetime import datetime

bot = telebot.TeleBot('7999938977:AAH9jl0TlxB6_xQJ_Xpjxp6BgG4isagjYQ') #–¢–æ–∫–µ–Ω –±–æ—Ç–∞
currency = CurrencyConverter()
amount = 0
user_data = {}

# –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã(–∫–Ω–æ–ø–∫–∏)
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤')
    btn2 = types.KeyboardButton('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç')
    btn3 = types.KeyboardButton('–ò—Å—Ç–æ—Ä–∏—è –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤')
    btn4 = types.KeyboardButton('–ü–æ–º–æ—â—å')
    markup.add(btn1, btn2, btn3, btn4)

    bot.send_message(message.chat.id,
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤. –í—ã–±–µ—Ä–∏, —á—Ç–æ –Ω—É–∂–Ω–æ:\n'
        '1. –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤\n'
        '2. –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç\n'
        '3. –ò—Å—Ç–æ—Ä–∏—è –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤\n'
        '4. –ü–æ–º–æ—â—å\n',
        reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == '–†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, get_income)
    elif message.text == '–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç':
        msg = bot.send_message(message.chat.id, '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—É—Ä—Å –ï–¶–ë, –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π\n  –í–≤–µ–¥–∏ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, get_amount)
    elif message.text == '–ü–æ–º–æ—â—å':
        msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –ø–æ–º–æ–∂–µ–º! \n üîß –î–∞–Ω–Ω—ã–π –±–æ—Ç –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª. \n üîß –ú—ã –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ —É–¥–æ–±–Ω–µ–µ –¥–ª—è –≤–∞—Å! \n üîß –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ —Ç–µ—Ä–ø–µ–Ω–∏–µ! \n üîß –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ! \n üîß –°–∫–æ—Ä–æ –≤—Å—ë –±—É–¥–µ—Ç –ª—É—á—à–µ!')
        bot.register_next_step_handler(msg, send_help)
    elif message.text == '–ò—Å—Ç–æ—Ä–∏—è –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤':
        show_totals_options(message)
    else:
        bot.send_message(message.chat.id, '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.')
        start(message)

#–î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã
def get_income(message):
    try:
        income = float(message.text)
        msg = bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤:')
        bot.register_next_step_handler(msg, lambda m: calculate_balance(m, income))
    except:
        bot.send_message(message.chat.id, '–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.')
        start(message)

def calculate_balance(message, income):
    try:
        expenses = float(message.text)
        balance = income - expenses
        now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        user_id = message.chat.id

        if user_id not in user_data:
            user_data[user_id] = []

        user_data[user_id].append({
            'datetime': now,
            'income': income,
            'expenses': expenses,
            'balance': balance
        })

        bot.send_message(message.chat.id, f'–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {now}\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance:.2f}')
        start(message)
    except:
        bot.send_message(message.chat.id, '–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.')
        start(message)

# –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–º/–¥–æ—Ö–æ–¥–æ–≤
def show_totals_options(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–û–±—â–∞—è –∏—Å—Ç–æ—Ä–∏—è', callback_data='totals_general')
    btn2 = types.InlineKeyboardButton('–î–µ—Ç–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è', callback_data='totals_detail')
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∏—Å—Ç–æ—Ä–∏–π:', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('totals_'))
def handle_totals(call):
    user_id = call.message.chat.id
    if user_id not in user_data or not user_data[user_id]:
        bot.send_message(user_id, '–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.')
        return

    if call.data == 'totals_general':
        total_income = sum(entry['income'] for entry in user_data[user_id])
        total_expenses = sum(entry['expenses'] for entry in user_data[user_id])
        total_balance = total_income - total_expenses

        bot.send_message(user_id,
            '–ò—Å—Ç–æ—Ä–∏—è –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤:\n'
            f'–î–æ—Ö–æ–¥–æ–≤: {total_income:.2f}\n'
            f'–†–∞—Å—Ö–æ–¥–æ–≤: {total_expenses:.2f}\n'
            f'–ë–∞–ª–∞–Ω—Å: {total_balance:.2f}')
    elif call.data == 'totals_detail':
        detail_lines = [
            f"{entry['datetime']} ‚Äî –î–æ—Ö–æ–¥: {entry['income']:.2f}, –†–∞—Å—Ö–æ–¥: {entry['expenses']:.2f}"
            for entry in user_data[user_id]
        ]
        response = '\n'.join(detail_lines)
        bot.send_message(user_id, f'–î–µ—Ç–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è:\n\n{response}')

# –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç –≤–∞–ª—é—Ç—ã, –¥–ª—è –¥—Ä—É–≥–∏—Ö –Ω—É–∂–Ω–∞ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
def get_amount(message):
    global amount
    try:
        amount = float(message.text)
        if amount <= 0:
            bot.send_message(message.chat.id, '–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!')
            start(message)
            return

        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('USD ‚Üí EUR', callback_data='convert_usd/eur')
        btn2 = types.InlineKeyboardButton('EUR ‚Üí USD', callback_data='convert_eur/usd')
        btn3 = types.InlineKeyboardButton('RUB ‚Üí USD', callback_data='convert_rub/usd')
        btn4 = types.InlineKeyboardButton('–î—Ä—É–≥–∞—è –≤–∞–ª—é—Ç–∞', callback_data='convert_other')
        markup.add(btn1, btn2, btn3, btn4)

        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—ã:', reply_markup=markup)
    except:
        bot.send_message(message.chat.id, '–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
        start(message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('convert_'))
def callback_handler(call):
    data = call.data.replace('convert_', '')
    if data == 'other':
        msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏ –ø–∞—Ä—É –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ / (–Ω–∞–ø—Ä–∏–º–µ—Ä USD/EUR):')
        bot.register_next_step_handler(msg, custom_currency)
    else:
        try:
            from_curr, to_curr = data.split('/')
            result = currency.convert(amount, from_curr.upper(), to_curr.upper())
            bot.send_message(call.message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {round(result, 2)}')
            start(call.message)
        except:
            bot.send_message(call.message.chat.id, '–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
            start(call.message)

def custom_currency(message):
    try:
        from_curr, to_curr = message.text.upper().split('/')
        result = currency.convert(amount, from_curr, to_curr)
        bot.send_message(message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {round(result, 2)}')
        start(message)
    except:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
        start(message)

# –ü–æ–º–æ—â—å
def send_help(message):
    bot.forward_message('@feedback_acc', message.chat.id, message.message_id) #–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å–æ–æ–±—à–µ–Ω–∏–π
    bot.send_message(message.chat.id, '–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –°–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º.')
    start(message)

bot.polling(none_stop=True)
